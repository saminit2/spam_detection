# -*- coding: utf-8 -*-
"""spam_detection_git

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_VIci4C7viLGRHfi44TVl08DwCL_lV9t
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
import pickle

def load_data(file_path):
    """Load data from a CSV file."""
    return pd.read_csv(file_path)

def preprocess_data(data):
    """Preprocess the data."""
    data["spam"].value_counts()
    x = np.array(data["text"])
    Y = np.array(data["spam"])
    cv = CountVectorizer()
    X = cv.fit_transform(x)
    return X, Y

def train_model(X, Y, test_size=0.2, random_state=42):
    """Train a Multinomial Naive Bayes classifier."""
    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size, random_state=random_state)
    clf = MultinomialNB()
    clf.fit(X_train, Y_train)
    return clf, X_test, Y_test

def evaluate_model(clf, X_test, Y_test):
    """Evaluate the model and display the confusion matrix."""
    y_preds = clf.predict(X_test)
    accuracy = clf.score(X_test, Y_test)
    print(f"Model Accuracy: {accuracy * 100}%")

    # Display the confusion matrix
    cm = confusion_matrix(y_true=Y_test, y_pred=y_preds)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Not Spam', 'Spam'])
    disp.plot(cmap='Blues', values_format='d')
    plt.title('Confusion Matrix')
    plt.show()

def save_model(clf, file_name):
    """Save the trained model."""
    with open(file_name, 'wb') as f:
        pickle.dump(clf, f)

def load_model(file_name):
    """Load a trained model."""
    with open(file_name, 'rb') as f:
        return pickle.load(f)

def predict_sample(clf, cv):
    """Predict the class of a sample message."""
    while True:
        sample = input("Enter a message (type 'exit' to end the loop): ")
        if sample.lower() == 'exit':
            break
        data = cv.transform([sample]).toarray()
        prediction = clf.predict(data)
        print("Predicted class:", prediction)

if __name__ == "__main__":
    # Load data
    data = load_data("/content/drive/MyDrive/spam_detection/emails.csv")

    # Preprocess data
    X, Y = preprocess_data(data)

    # Train model
    clf, X_test, Y_test = train_model(X, Y)

    # Evaluate model
    evaluate_model(clf, X_test, Y_test)

    # Save model
    save_model(clf, 'CLF_MultinomialNB_CountVectorizer_spam_detection_test_size_0.2.pkl')

    # Test the model with sample messages
    clf = load_model('CLF_MultinomialNB_CountVectorizer_spam_detection_test_size_0.2.pkl')
    predict_sample(clf, cv)